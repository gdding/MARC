# -----------------------------------------------------------------------------------------------------------------
# MARC是一个分布式的运行框架，由三个部分组成：Master节点、Result节点和Client节点。MARC中的几个字母分别表示：
# M - Master, A - Application, R - Resut, C - Client。其具体的功能简要描述如下。
# 【Master】
# Master是整个框架的“管理者”，在整个框架中只有一个Master节点（可配置一个备份节点），其职责是：
# (1) 接收各Client节点、Result节点的注册请求和运行状态信息；
# (2) 在Client节点需要任务时自动调用用户编写的任务生成程序，并将其生成的任务下发给Client节点；
# (3) 将任务执行结果的存储服务地址告知Client节点（即相应的Result节点地址）；
# (4) 监控各个Client节点的任务执行情况；
# (5) 管理各个Client节点、Result节点的应用程序版本信息，必要时进行应用程序升级；
# 【Application】
# Application为用户的应用程序。MARC系统只是一个运行框架，具体用来干什么，是用户应用程序所赋予的功能。具体来说，
# MARC框架的使用者可按照MARC提供的接口规范分别编写部署在Master节点上的“任务生成程序”、部署在Client节点上的
# “任务执行程序”和部署在Result节点上的“结果处理程序”，这三个用户应用程序与MARC框架共同组成了一个基于任务的分布
# 式运行系统，其基本流程是：“任务生成->任务下载->任务执行->结果回传->结果存储”，具体地：
# (1) 任务生成：在Master节点，MARC框架会自动监测每个Client节点的任务执行状况，当某个Client节点需要任务时，
#      MARC框架会自动调用用户的“任务生成程序”。
# (2) 任务下载：当Client节点从Master节点获知其任务生成完成后，Client节点自动从Master节点下载生成的任务数据。
#      为提高传输效率，任务数据首先在Master节点经过压缩处理，Client节点接收完成后再进行解压。
# (3) 任务执行：Client节点得到任务后，MARC框架会自动调用用户的任务执行程序（以异步、非阻塞的方式执行）。
# (4) 结果回传：Client节点的任务执行程序运行完成后，MARC框架会自动将任务执行的结果上传到Result节点（Master节点
#      会告知Client节点其任务执行结果应该上传到哪个Result节点）。
# (5) 结果处理：Result节点在接收完Client节点上传的任务执行结果后，会自动调用用户的“结果处理程序”，完成比如结果
#      入库或其他的处理工作。
# 以上各个过程之间是可以并行进行的，比如，可以设置为异步上传策略，这样当任务执行完成后，可以马上获取新任务而不必
# 等待结果上传完毕。
# 【Result】
# Result节点是整个框架的结果收集和处理端，在整个MARC框架中可以是一个或者多个节点。负责接收Client节点上传的任务
# 执行结果，并自动调用用户的结果处理程序完成对任务执行结果的处理工作。
# 【Client】
# Client节点是MARC框架中的任务执行端，在整个MARC框架中可以部署多个Client节点。负责执行Master节点下发的任务。
# 
# 开发者：丁国栋，dingguodong@ict.ac.cn, gdding@hotmail.com
# -----------------------------------------------------------------------------------------------------------------


[master]

# Master节点的监听地址
MasterIp=10.99.0.217
MasterPort=6600

# Master备用节点的监听地址
BakMasterIp=127.0.0.1
BakMasterPort=6600

[client]

# Client节点编号,非负整数,在整个MARC框架中各个Client节点编号必须不同。为0时由Master自动分配ID。
# 由Master来分配ID可以节省人工配置工作量以及容易出错的问题，并确保所有Client都能得到一个唯一的ID。
# 但要注意，同一个Client在每次启动时分配得到的ID很可能不相同，有些应用需要为各个Client节点设置固定
# 的ID，在这种情况下，建议不要由Master来分配ID。
# Master在自动分配ID时，从10001开始，若用户需自己设置固定的ID，建议设置为10001以下的值。
ID=0

# 被调用的用于执行任务的用户应用程序执行命令
# 调用方式: [AppCmd] [InputDir] [OutputDir] [ID]，如"./Test.exe ./input/ ./output/ 2"
# 其中：
# ---- [AppCmd]可以是可执行程序或批处理程序或shell脚本（Linux下应注意加上路径如"./Test.sh"或"./Test"），可自带参数。
# ---- [InputDir]对应于下面InputDir参数给定的文件夹路径，用于存放用户应用程序的输入，对应于MARC框架的Master节点
#       的任务生成程序来创建的任务生成结果文件夹。
# ---- [OutputDir]对应于下面的OutputDir参数给定的文件夹路径，用于存放用户应用程序的执行结果。用户应用程序执行完成
#       后，MARC框架将对[OutputDir]中的文件进行压缩，回传给Result节点。
# 注意：
# (1) 用户应用程序必须能在有限时间内执行完成，不能是长期运行的“循环型”程序。
# (2) 用户应用程序执行成功后，须在MARC框架的当前目录下生成空的标志文件".success"，以向MARC框架表明程序执行成功。
# (3) 若MARC框架找不到.success文件则认为程序执行失败，Master节点将认为该任务执行失败（失败的任务后续会重新下发和执行）
# (4) 若AppCmd为空或文件不存在，则不会向Master节点请求任务，此时Client节点从功能上看只用来发送节点状态信息
AppCmd=./Test.sh

# 被调用的用户应用程序的类型（大小写敏感），须是由字母或数字组成的字符串（不能含有下划线_），不能是空串。
# AppType在整个MARC框架中起着十分重要的作用，它为具有相同的任务生成、任务执行、结果处理
# 的用户应用程序起着关联的作用。在整个MARC框架中，支持多种不同类型的应用程序，也就是说，
# 不同类型的用户应用程序可以部署于同一个MARC框架中，从而完成多种不同类型的任务。
AppType=Test

# 是否需要上传任务执行结果，非0时MARC框架将对[OutputDir]进行压缩回传给Result节点。
# 一般的应用场合下，都需要将任务执行结果上传到Result节点进行后续处理（如入库等），
# 如果任务执行完后没有结果数据需要回传（比如任务执行程序自身完成了结果的后续处理如入库），
# 则可以将该参数设置为0。
ResultUploadEnabled=1

# 非0时异常日志将回传给Master节点（便于前台页面显示查看），缺省为0
# 注意：若网络情况比较糟糕，设置为非0时会进一步加剧网络开销和Master节点的网络负载
UploadErrorLog=0

# ------------------------------------------------------------------------------------------------------
# 以下部分用于进行应用程序版本更新的相关参数设置。
# Client节点在空闲时（即未执行任务时），每隔一段时间（由参数[UpdateInterval]指定）向Master请求是否需要升级,
# 若需要升级则从Master节点上下载版本号最大的升级包压缩文件，下载完成后解压到参数[UpdateTargetPath]指定的路径下。
# 注意几点：
# (1) 升级只针对应用程序（及其相关文件），不能对框架本身进行升级。
# (2) 是否需要升级的依据：Master节点上有一个升级包，其版本号大于Client节点的应用程序当前版本号。
# (3) 升级完成后，MARC框架会自动把升级后的版本号保存在本地的[AppType].marc.ver文件中。
# ------------------------------------------------------------------------------------------------------
[update]

# 非0时开启应用程序版本自动更新功能
# 如果不需要版本自动更新建议设置为0，可以减少网络开销
Enabled=0

# 升级目标路径（即升级包中的文件存放在何处）
UpdateTargetPath=./

# 每隔多少秒向Master请求是否需要升级
UpdateInterval=600

# 下载的升级包压缩文件的临时存放路径
ZipUpdateDir=./myzip_update_download/


# ----------------------------------------------------
#以下部分为Client节点的高级配置，一般来说不用改动
# ----------------------------------------------------
[advanced]

# 用户应用程序的输入文件夹路径
InputDir=./input/

# 用户应用程序的输出文件夹路径
OutputDir=./output/

# 从Master节点接收的任务压缩文件的临时存放路径
# 系统自动将任务压缩文件解压到[InputDir]
ZipTaskDir=./myzip_task_download/

# 对用户应用程序执行结果（即[OutputDir]）压缩后的存放路径
ZipResultDir=./myzip_result_upload/

# Client节点心跳周期（每隔多少秒发送一次心跳信息以及状态信息给Master节点）
HeartbeatInterval=10

# Client节点应用程序状态发送时间间隔（秒）
StateInterval=60

# 一次任务执行完成后隔多长时间再请求新任务
# 为0时表示一次任务执行完后立刻请求新任务
TaskReqWaitTime=0

# 用户应用程序的最大运行时间（单位秒），超过该值时将被MARC框架强行杀死
# 若设置为0则不限定程序运行时间
AppRunTimeout=3600

# 0：同步上传，当任务完成后，只有等结果上传完毕后才请求下一次任务
# 1：异步上传，当任务完成后，立即请求下一次任务，结果上传将异步进行
AsynUpload=1

# 异步上传时，等待上传的文件个数最大值（若超过该值，Client节点将不再向Master节点获取任务）
MaxWaitingUploadFiles=5

# 非0时, 自动删除已上传完的结果文件
AutoDeleteResultFile=1

# 非0时, 自动删除已处理完的任务压缩文件
AutoDeleteTaskFile=1

# 非0时，记录首次上传结果时向Master请求获得当时负载最小的Result节点地址
# 此后上传时不再向Master请求获得Result节点地址，除非某次上传失败。
# 为0时，每次上传结果都将向Master节点请求获得当时负载最小的Result节点地址
RememberResultAddr=0

# Client向Master请求任务失败时隔多少秒再次请求
# 请求失败的原因一般是因为请求时Master节点上没有准备好任务
TaskReqTimeInterval=5

# 非0时在Client节点终止时自动保存未上传的结果文件以便下次启动时重新载入
AutoSaveUploadFile=1

# 每隔多长时间监控Client节点资源使用状态信息（秒）
SourceStatusInterval=300
