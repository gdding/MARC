# -----------------------------------------------------------------------------------------------------------------
# MARC是一个分布式的运行框架，由三个部分组成：Master节点、Result节点和Client节点。MARC中的几个字母分别表示：
# M - Master, A - Application, R - Resut, C - Client。其具体的功能简要描述如下。
# 【Master】
# Master是整个框架的“管理者”，在整个框架中只有一个Master节点（可配置一个备份节点），其职责是：
# (1) 接收各Client节点、Result节点的注册请求和运行状态信息；
# (2) 在Client节点需要任务时自动调用用户编写的任务生成程序，并将其生成的任务下发给Client节点；
# (3) 将任务执行结果的存储服务地址告知Client节点（即相应的Result节点地址）；
# (4) 监控各个Client节点的任务执行情况，等等。
# 【Application】
# Application为用户的应用程序。MARC系统只是一个运行框架，具体用来干什么，是用户应用程序所赋予的功能。具体来说，
# MARC框架的使用者可按照MARC提供的接口规范分别编写部署在Master节点上的“任务生成程序”、部署在Client节点上的
# “任务执行程序”和部署在Result节点上的“结果处理程序”，这三个用户应用程序与MARC框架共同组成了一个基于任务的分布
# 式运行系统，其基本流程是：“任务生成->任务下载->任务执行->结果回传->结果存储”，具体地：
# (1) 任务生成：在Master节点，MARC框架会自动监测每个Client节点的任务执行状况，当某个Client节点需要任务时，
#      MARC框架会自动调用用户的“任务生成程序”。
# (2) 任务下载：当Client节点从Master节点获知其任务生成完成后，Client节点自动从Master节点下载生成的任务数据。
#      为提高传输效率，任务数据首先在Master节点经过压缩处理，Client节点接收完成后再进行解压。
# (3) 任务执行：Client节点得到任务后，MARC框架会自动调用用户的任务执行程序（以异步、非阻塞的方式执行）。
# (4) 结果回传：Client节点的任务执行程序运行完成后，MARC框架会自动将任务执行的结果上传到Result节点（Master节点
#      会告知Client节点其任务执行结果应该上传到哪个Result节点）。
# (5) 结果处理：Result节点在接收完Client节点上传的任务执行结果后，会自动调用用户的“结果处理程序”，完成比如结果
#      入库或其他的处理工作。
# 以上各个过程之间是可以并行进行的，比如，可以设置为异步上传策略，这样当任务执行完成后，可以马上获取新任务而不必
# 等待结果上传完毕。
# 【Result】
# Result节点是整个框架的结果收集和处理端，在整个MARC框架中可以是一个或者多个节点。负责接收Client节点上传的任务
# 执行结果，并自动调用用户的结果处理程序完成对任务执行结果的处理工作。
# 【Client】
# Client节点是MARC框架中的任务执行端，在整个MARC框架中可以部署多个Client节点。负责执行Master节点下发的任务。
#
# 开发者：丁国栋，dingguodong@ict.ac.cn, gdding@hotmail.com
# -----------------------------------------------------------------------------------------------------------------


[master]

# Master节点的IP和端口
MasterIp=10.61.1.249
MasterPort=6600

# Master备用节点的监听IP和端口
BakMasterIp=127.0.0.1
BakMasterPort=6600

[result_server]

# 当前Result节点的IP和监听端口
# 注意：
# (1) 不要将IP设置为0.0.0.0，否则可能会导致Result节点无法接收client节点上传的结果数据。
# (2) 当NatEnabled为0时（一般情况下如此），Result节点在启动阶段向Master节点注册时，
#     会将ListenIp和ListenPort告知Master节点，当Client节点需要上传任务结果数据时，
#     由Master节点选择负载最小的Result节点的ListenIp和ListenPort告知Client节点，后者
#     通过该IP和端口与Result节点进行通讯和数据传输。因此，当NatEnabled为0时，必须确保
#     Client节点能连接到ListenIp和ListenPort。
# (3) 当NatEnabled为1时（基于NAT的网络环境），ListenIp设置为Result节点的本地私有IP，
#     如192.168.1.8；NatIp必须设置为NAT转换后的IP如202.106.12.98，Result节点在启动阶段
#     向Master节点注册时，告知Master节点用于接收Client节点任务执行结果的IP和端口是NatIp
#     和ListenPort,Client节点必须能连接上NatIp和ListenPort，否则将无法接收任务执行结果。 
# (4) 非NAT网络环境下，若NatEnabled设置为1，则应该将NatIp设置为ListenIp同样的地址。
ListenIp=10.61.1.249
ListenPort=7600

# NAT情况下的设置
NatEnabled=0
NatIp=202.106.21.98


# 非空时只接收指定应用程序类型（参阅client.ini中的AppType参数）的结果数据
# 不填写时可接收所有类型的应用程序的结果数据
AppType=

# 非0时异常日志将回传给Master节点（便于前台页面显示查看），缺省为0
# 注意：若网络情况比较糟糕，设置为非0时会进一步加剧网络开销和Master节点的网络负载
UploadErrorLog=0


# -----------------------------------------------------------------------------------------------------------------
# 各种类型应用程序的结果处理命令（大小写敏感），格式为: [AppType]=[AppCmd]，如"NewsGather=./NewsStore"
# 其中[AppType]为用户应用程序的类型（对应client.ini中的AppType参数），[AppCmd]为用户针对该类型应用程序而编写
# 的结果处理命令，可以自带命令行参数。
# 注意几点：
# (1) 若上面的AppType参数为空，则这里应列出所有类型应用程序的结果处理命令；否则可只列出AppType对应的处理命令。
# (2) Result节点接收到结果数据后，结果处理程序会被自动调用，调用接口：[AppCmd] [ResultPath] [ClientID]
#      如"./NewsStore ./data/1_NewsGather_result_20100204095923/ 1"，其中：
#      ---- [ResultPath]为待处理结果的存放路径，其存放的内容对应于Client节点的"OutputDir"文件夹内容。
#      ---- [ClientID]为生成该结果的Client节点ID。
# (3) 结果处理命令执行成功后，须在[ResultPath]目录下生成.success标志文件告知MARC框架其执行成功，否则MARC将在后续重新
#     调用结果处理命令处理该结果文件
# (4) 结果处理命令执行后（不管是否成功），MARC框架会自动删除结果数据文件夹。
# (5) 若结果处理命令执行失败，则MARC框架会将失败的结果文件重新放入待处理对列等待以后再处理。
# -----------------------------------------------------------------------------------------------------------------
[appcmd]

#应用程序类型为"Test"的结果处理命令
Test=./ResultStoreTest.sh

#应用程序类型为"NewsGather"的结果处理命令
NewsGather=./NewsStore

#应用程序类型为"ForumGather"的结果处理命令
ForumGather=./ForumStore


# ----------------------------------------------------
#以下部分用于进行应用程序版本更新的相关参数设置
# ----------------------------------------------------
[update]

# 非0时开启应用程序版本自动更新功能
# 如果不需要版本自动更新建议设置为0，可以减少网络开销
Enabled=0

# 升级目标路径（即升级包中的文件存放在何处）
UpdateTargetPath=./

# 每隔多少秒向Master请求是否需要升级
UpdateInterval=60

# 下载的升级包压缩文件的临时存放路径
ZipUpdateDir=./myzip_update_download/


# --------------------------------------------------------
# 以下部分为Result节点的高级配置，一般来说不用改动
# --------------------------------------------------------
[advanced]

# 存放从Client节点接收并解压后的结果数据的临时文件夹（已解压）
DataDir=./data/

# 从Client节点接收的结果压缩文件的缓存文件夹
ZipResultDir=./myzip_result/

# Result节点心跳周期（每隔多少秒发送一次心跳信息以及状态信息给Master节点）
HeartbeatInterval=3

#上传时每个数据包的最大字节数（不小于4096）
MaxPacketSize=4096

# 结果上传最大耗时（秒），超过该值的将不再接收
UploadTimeout=600

# 各个结果处理程序的执行时限(秒)
AppRunTimeout=60

# 结果处理失败时重试次数，超过则抛弃
ResultFailMaxRetry=3

#非0时, 自动删除已处理完的结果文件
AutoDeleteResultFile=1

# 非0时在Result节点终止时自动保存未处理的结果文件以便下次启动时重新载入
AutoSaveUnfinishedResultFile=1

# 每隔多长时间监控Result节点资源使用状态信息（秒）
SourceStatusInterval=300

